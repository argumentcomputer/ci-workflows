# Patches a dependent crate with any upstream changes and checks that the former compiles
#
# Example:
# When run in `arecibo`, this workflow will check out `lurk-rs`, patch it with the local `arecibo` path,
# and check whether `lurk-rs` still builds.
#
# Only supports patching Git dependencies for now, crates.io patches are a TODO
# This workflow is not intended to be a required status check, but to surface breaking changes to 
# downstream repos for further review on e.g. `pull_request`.
name: Check downstream dependency compiles

on:
  workflow_call:
    secrets:
      REPO_TOKEN:
        required: false
        description: ''
    inputs:
      runner:
        required: false
        default: 'ubuntu-latest'
        type: string
      # Downstream repo to check
      repository:
        required: false
        default: 'lurk-lab/lurk-rs'
        type: string
      # Used to checkout private repos
      token:
        required: false
        default: false
        type: boolean
      # List of prerequisite Ubuntu packages, separated by whitespace
      packages:
        required: false
        type: string
      # Patch with SSH instead of HTTPS
      patch-ssh:
        required: false
        default: false
        type: boolean

jobs:
  check-downstream-compiles:
    if: github.event_name == 'pull_request'
    runs-on: ${{ inputs.runner }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/ci-env
      - uses: ./.github/actions/install-deps
        if: inputs.packages != ''
        with:
          packages: "${{ inputs.packages }}"
      - name: Set env
        run: |
          echo "DOWNSTREAM_REPO=$(echo ${{ inputs.repository }} | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
          echo "UPSTREAM_REPO=$(echo ${{ github.repository }} | awk -F'/' '{ print $2 }')" | tee -a $GITHUB_ENV
      - uses: actions/checkout@v4
        with:
          path: ${{ github.workspace }}/${{ env.UPSTREAM_REPO }}
          submodules: recursive
      - uses: actions/checkout@v4
        if: inputs.token != true
        with:
          repository: ${{ inputs.repository }}
          path: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
          submodules: recursive
      - uses: actions/checkout@v4
        if: inputs.token
        with:
          repository: ${{ inputs.repository }}
          path: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
          submodules: recursive
          token: "${{ secrets.REPO_TOKEN }}"
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Patch Cargo.toml
        working-directory: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
        run: |
          if [[ "${{ inputs.patch-ssh }}" == "true" ]]; then
            URL=ssh://git@github.com/${{ github.repository }}
          else
            URL=https://github.com/${{ github.repository }}
          fi

          # Assumes at least one dependency in the current workspace is used by the downstream crate
          printf "\n[patch.'$URL']\n" | tee -a Cargo.toml

          # Get a list of all upstream dependencies used by the downstream crate workspace
          # This is done by checking for each instance of `git = <upstream_url>` in any of the downstream `Cargo.toml` files
          DEPENDENCIES=$(grep -rsh "git = \"$URL\"" --include="Cargo.toml" .)
          echo "DEPENDENCIES"
          echo $DEPENDENCIES

          # Extract the dependency names and check for package renames, removing duplicates
          DEP_NAMES=$(echo "$DEPENDENCIES" | awk '/package =/{for (i=1; i<=NF; i++) if ($i == "package") {name=$(i+2); print substr(name, 2, length(name)-2);} found=1} !/package =/{print $1}' | sort -u)
          echo "DEP_NAMES"
          echo $DEP_NAMES

          # Get each workspace member of the upstream crate if they exist
          WORKSPACE_PATHS=$(sed -n '/members = \[/,/]/ { /members = \[/d; /]/d; s/^\s*"\([^"]*\)",\?/\1/p }' ../${{ env.UPSTREAM_REPO }}/Cargo.toml)
          echo "WORKSPACE_PATHS"
          echo $WORKSPACE_PATHS

          # Write the Git patch for each dependency used downstream
          for crate in $DEP_NAMES; do
            result=$(echo "$WORKSPACE_PATHS" | grep -ohs "\w*$crate\w*" | cat)
            echo "Result for crate $crate: $result"
            if [[ -n $result ]]; then
              crate_path=$result
            else
              crate_path=""
            fi
            echo "$crate = { path = \"../${{ env.UPSTREAM_REPO }}/$crate_path\" }" | tee -a Cargo.toml
          done
      - name: Check downstream types don't break spectacularly
        working-directory: ${{ github.workspace }}/${{ env.DOWNSTREAM_REPO }}
        run: cargo check --workspace --tests --benches --examples

