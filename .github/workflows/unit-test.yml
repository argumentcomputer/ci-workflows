name: Run unit tests, clippy, msrv

on:
  workflow_call:
    inputs:
      runner:
        required: false
        default: 'ubuntu-latest'
        type: string

env:
  CARGO_TERM_COLOR: always
  # Disable incremental compilation.
  #
  # Incremental compilation is useful as part of an edit-build-test-edit cycle,
  # as it lets the compiler avoid recompiling code that hasn't changed. However,
  # on CI, we're not making small edits; we're almost always building the entire
  # project from scratch. Thus, incremental compilation on CI actually
  # introduces *additional* overhead to support making future builds
  # faster...but no future builds will ever occur in any given CI environment.
  #
  # See https://matklad.github.io/2021/09/04/fast-rust-builds.html#ci-workflow
  # for details.
  CARGO_INCREMENTAL: 0
  # Allow more retries for network requests in cargo (downloading crates) and
  # rustup (installing toolchains). This should help to reduce flaky CI failures
  # from transient network timeouts or other issues.
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  # Don't emit giant backtraces in the CI logs.
  RUST_BACKTRACE: short

jobs:
  # TODO: Should this be a composite action? Some uses will want to perform additional testing steps afterward,
  # and recompiling in a separate job seems wasteful
  build:
   runs-on: ${{ inputs.runner }}
   env:
     RUSTFLAGS: -D warnings
   steps:
   - uses: actions/checkout@v4
   - name: Setup Rust
     uses: actions-rs/toolchain@v1
   - uses: taiki-e/install-action@nextest
   - uses: Swatinem/rust-cache@v2
   - name: Build, with benches & examples
     run: cargo build --profile dev-ci --benches --examples 
   - name: Linux Tests in parallel, with nextest profile ci and cargo profile dev-ci
     run: |
       cargo nextest run --profile ci --workspace --cargo-profile dev-ci

  # Wasm build, rustfmt, clippy, and doctests
  misc:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    env:
      RUSTFLAGS: -D warnings
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v2
      - run: rustup target add wasm32-unknown-unknown
      - name: Wasm build 
        run: cargo build --target wasm32-unknown-unknown
      - name: Check Rustfmt Code Style
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - name: Check clippy warnings
        run: |
          if alias xclippy >/dev/null 2>&1; then 
            cargo xclippy
          else 
            cargo clippy
          fi
      - name: Doctests
        run: cargo test --doc --workspace

  # Check MSRV in `Cargo.toml` is valid
  msrv:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install rustup
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true
    - uses: Swatinem/rust-cache@v2
    - name: Install cargo-msrv
      run: cargo install cargo-msrv
    - name: Check Rust MSRV
      run: cargo msrv verify 
