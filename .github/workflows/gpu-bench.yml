# Run final tests only when attempting to merge, shown as skipped status checks beforehand
# Prerequisites
# - Self-hosted Nvidia GPU runner with `gpu-bench` tag in caller repo
# - `cuda` Cargo features
# - Pre-existing `gh-pages` branch
# - Run on `merge_group` trigger only
name: Comparative benchmarks on GPU

on:
  workflow_call:
    inputs:
      # List of prerequisite Ubuntu packages, separated by whitespace
      packages:
        required: false
        type: string

jobs:
  # Run comparative benchmark against base branch, open issue on regression
  gpu-benchmark:
    runs-on: [self-hosted, gpu-bench]
    steps:
      # Set up GPU
      - uses: actions/checkout@v4
        with:
          repository: lurk-lab/ci-workflows
      - uses: ./.github/actions/gpu-setup
        with:
          gpu-framework: 'cuda'
      - uses: ./.github/actions/ci-env
      - uses: ./.github/actions/install-deps
        if: inputs.packages != ''
        with:
          packages: "${{ inputs.packages }}"
      - uses: actions/checkout@v4
      # Install dependencies
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install criterion
        run: |
          cargo install cargo-criterion
          cargo install criterion-table
      # Requires benchmarks to be formatted for `criterion-table` using `${REPOSITORY_NAME}_BENCH_OUTPUT=commit-comment`
      # e.g. `$LURK_BENCH_OUTPUT=commit-comment`
      - name: Set env vars
        run: |
          REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F'/' '{ print toupper($2) }')
          echo "${REPOSITORY_NAME}_BENCH_OUTPUT=commit-comment" | tee -a $GITHUB_ENV
          echo "BASE_COMMIT=${{ github.event.merge_group.base_sha }}" | tee -a $GITHUB_ENV
          echo "GPU_ID=$(echo $GPU_NAME | awk '{ print $NF }')" | tee -a $GITHUB_ENV
      # Checkout gh-pages to check for cached bench result
      - name: Checkout gh-pages
        uses: actions/checkout@v4
        with:
          ref: gh-pages
          path: gh-pages
      - name: Check for cached bench result
        id: cached-bench
        run: |
          if [ -f "${{ env.BASE_COMMIT }}-${{ env.GPU_ID }}.json" ]
          then
            echo "cached=true" | tee -a $GITHUB_OUTPUT
            cp ${{ env.BASE_COMMIT }}-${{ env.GPU_ID }}.json ../${{ env.BASE_COMMIT }}.json
          else
            echo "cached=false" | tee -a $GITHUB_OUTPUT
          fi
        working-directory: ${{ github.workspace }}/gh-pages
      # Checkout base branch for comparative bench
      - uses: actions/checkout@v4
        if: steps.cached-bench.outputs.cached == 'false'
        with:
          ref: ${{ github.base_ref }}
          path: ${{ github.base_ref }}
      - name: Run GPU bench on base branch
        if: steps.cached-bench.outputs.cached == 'false'
        run: |
          # Run benchmark
          cargo criterion --features "cuda" --message-format=json > ${{ env.BASE_COMMIT }}.json
          # Copy bench output to PR branch
          cp ${{ env.BASE_COMMIT }}.json ..
        working-directory: ${{ github.workspace }}/${{ github.base_ref }}
      - name: Run GPU bench on PR branch
        run: |
          cargo criterion --features "cuda" --message-format=json > ${{ github.sha }}.json
          cp ${{ github.sha }}.json ..
        working-directory: ${{ github.workspace }}/benches
      - name: copy the benchmark template and prepare it with data
        run: |
          cp .github/tables.toml .
          # Get CPU model
          CPU_MODEL=$(grep '^model name' /proc/cpuinfo | head -1 | awk -F ': ' '{ print $2 }')
          # Get num vCPUS
          NUM_VCPUS="$(nproc --all) vCPUs"
          # Get total RAM in GB
          TOTAL_RAM=$(grep MemTotal /proc/meminfo | awk '{$2=$2/(1024^2); print int($2), "GB RAM";}')
          
          # Use conditionals to ensure that only non-empty variables are inserted
          [[ ! -z "${{ env.GPU_NAME }}" ]] && sed -i "/^\"\"\"$/i ${{ env.GPU_NAME }}" tables.toml
          [[ ! -z "$CPU_MODEL" ]] && sed -i "/^\"\"\"$/i $CPU_MODEL" tables.toml
          [[ ! -z "$NUM_VCPUS" ]] && sed -i "/^\"\"\"$/i $NUM_VCPUs" tables.toml
          [[ ! -z "$TOTAL_RAM" ]] && sed -i "/^\"\"\"$/i $TOTAL_RAM" tables.toml          
          sed -i "/^\"\"\"$/i Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" tables.toml
        working-directory: ${{ github.workspace }}
      # Create a `criterion-table` and write in commit comment
      - name: Run `criterion-table`
        run: cat ${{ env.BASE_COMMIT }}.json ${{ github.sha }}.json | criterion-table > BENCHMARKS.md
      - name: Write bench on commit comment
        uses: peter-evans/commit-comment@v3
        with:
          body-path: BENCHMARKS.md
      # Check for a slowdown >= 10%. If so, open an issue but don't block merge
      - name: Check for perf regression
        id: regression-check
        run: |
          regressions=$(awk -F'[*x]' '/slower/{print $12}' BENCHMARKS.md)

          echo $regressions

          for r in $regressions
          do
            if (( $(echo "$r >= 1.10" | bc -l) ))
            then
              exit 1
            fi
          done
        continue-on-error: true
      # Not possible to use ${{ github.event.number }} with the `merge_group` trigger
      - name: Get PR number from merge branch
        run: |
          echo "PR_NUMBER=$(echo ${{ github.event.merge_group.head_ref }} | sed -e 's/.*pr-\(.*\)-.*/\1/')" | tee -a $GITHUB_ENV
      - name: Create file for issue
        if: steps.regression-check.outcome == 'failure'
        run: |
          printf '%s\n' "Regression >= 10% found during merge for PR #${{ env.PR_NUMBER }}
          Commit: ${{ github.sha }}
          Workflow run: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" > ./_body.md
      - name: Open issue on regression
        if: steps.regression-check.outcome == 'failure'
        uses: peter-evans/create-issue-from-file@v5
        with:
          title: ':rotating_light: Performance regression detected for PR #${{ env.PR_NUMBER }}'
          content-filepath: ./_body.md
          labels: |
            P-Performance
            automated issue
      - name: Remove old base bench
        run: |
          rm ${{ env.BASE_COMMIT }}.json
          mv ${{ github.sha }}.json ${{ github.sha }}-${{ env.GPU_ID }}.json
        working-directory: ${{ github.workspace }}
      - name: Commit bench result to `gh-pages` branch if no regression
        if: steps.regression-check.outcome != 'failure'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: gh-pages
          commit_message: '[automated] GPU Benchmark from PR #${{ env.PR_NUMBER }}'
          file_pattern: '${{ github.sha }}-${{ env.GPU_ID }}.json'
